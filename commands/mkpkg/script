#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: mongodb:mkpkg: "Create a OS package of the Mongo Database"
#/ usage: rerun mongodb:mkpkg  --build-number <>  --mongo-version <2.2.2>  --target </tmp> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh mkpkg || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: mongodb:mkpkg. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: BUILD_NUMBER MONGO_VERSION TARGET

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
CACHEDIR="/tmp/rerun.mongodb.cache"
BLDDIR="/tmp/rerun.mongodb.mkpkg.${BUILD_NUMBER}"

if [[ ! -d ${CACHEDIR} ]]; then
  mkdir -p ${CACHEDIR} || rerun_die "Failed making cache directory"
fi

if [[ -d ${BLDDIR} ]]; then
  if [[ ${BUILD_NUMBER} -eq 0 ]]; then
    # Build zero is reserved for testing
    rm -rf ${BLDDIR}
  else
    rerun_die "Build directory exists, please increment the build number"
  fi
fi
mkdir -p ${BLDDIR}/tmp \
         ${BLDDIR}/SOURCES \
         ${BLDDIR}/BUILD \
         ${BLDDIR}/RPMS \
         ${BLDDIR}/SPECS \
         ${BLDDIR}/SRPMS || rerun_die

# template time
for h in mongod.init mongos.init; do
  SRC="${RERUN_MODULE_DIR}/lib/${h}";
  DST="${BLDDIR}/SOURCES/${h}";
  sed -e "s:@MONGODPATH@:/usr:g" ${SRC} > ${DST}
done

# Grab the mongo db distribution
if [[ ! -f ${CACHEDIR}/mongodb-linux-x86_64-${MONGO_VERSION}.tgz ]]; then
  wget --tries=5 -P ${CACHEDIR} \
    http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-${MONGO_VERSION}.tgz \
    || rerun_die "Failed to download mongo database release tarball"
fi

ln -s ${CACHEDIR}/mongodb-linux-x86_64-${MONGO_VERSION}.tgz \
  ${BLDDIR}/SOURCES/mongodb-linux-x86_64-${MONGO_VERSION}.tgz

# use our spec file
cp ${RERUN_MODULE_DIR}/lib/mongodb.spec ${BLDDIR}/SPECS/

# build it
rpmbuild -ba --define "_topdir ${BLDDIR}" \
             --define "_tmppath ${BLDDIR}/tmp" \
             --define "mongo_version ${MONGO_VERSION}" \
             --define "release ${BUILD_NUMBER}" \
             ${BLDDIR}/SPECS/mongodb.spec

mkdir -p "${TARGET}"
find ${BLDDIR}/{RPMS,SRPMS}/ -name "*.rpm" -exec mv {} ${TARGET}/ \;

rm -rf ${BLDDIR}
# - - -

# Done. Exit with last command exit status.
exit $?

